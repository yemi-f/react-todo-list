{"version":3,"sources":["TodoItem.js","AddTodoItem.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","props","squareIconStyle","color","strokeWidth","stroke","cursor","itemStyle","padding","borderRadius","fontSize","backgroundColor","isCompleted","useState","isActive","source","icon","faSquare","style","setIcon","className","marginRight","onClick","faCheckSquare","markCompleted","bind","id","title","faTrashAlt","deleteTodoItem","float","marginLeft","AddTodoItem","newTitle","setNewTitle","onSubmit","event","preventDefault","addTodoItem","type","placeholder","value","onChange","e","target","borderWidth","TodoList","uuidv4","todos","setTodos","map","todo","console","log","filter","newTodoItem","key","App","faThList","size","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ee1b2f07.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCheckSquare, faSquare, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\n\n\nconst TodoItem = (props) => {\n\n\n    const squareIconStyle = {\n        color: \"transparent\",\n        strokeWidth: \"48\",\n        stroke: \"#615F61\",\n        cursor: \"pointer\",\n    }\n\n    const trashIconStyle = {\n        float: \"right\",\n        cursor: \"pointer\",\n        marginLeft: \"16px\",\n    }\n\n    const itemStyle = {\n        padding: \"12px\",\n        borderRadius: \"8px\",\n        fontSize: \"1.2em\",\n\n        backgroundColor: props.isCompleted ?\n            '#232C37' : '#242324',\n        color: props.isCompleted ?\n            '#3A89D3' : '#f5f9f9',\n    }\n\n    const [icon, setIcon] = useState({\n        isActive: false,\n        source: <FontAwesomeIcon icon={faSquare} style={squareIconStyle} />,\n    })\n\n    const iconIsClicked = () => {\n        if (icon.isActive === false) {\n            setIcon({\n                isActive: true,\n                source: <FontAwesomeIcon icon={faCheckSquare} />\n            })\n        } else {\n            setIcon({\n                isActive: false,\n                source: <FontAwesomeIcon icon={faSquare} style={squareIconStyle} />\n            })\n        }\n    }\n\n\n    return (\n        <div>\n            <p style={itemStyle} className=\"todo-item\">\n                <span style={{ marginRight: \"16px\" }} onClick={() => iconIsClicked()}>\n                    <span onClick={props.markCompleted.bind(this, props.id)}>\n                        {icon.source}\n                    </span>\n                </span>\n                {props.title}\n                <FontAwesomeIcon icon={faTrashAlt} onClick={props.deleteTodoItem.bind(this, props.id)}\n                    style={trashIconStyle}\n                />\n            </p>\n        </div>\n    )\n}\n\nexport default TodoItem;","import React, { useState } from 'react';\n\nconst AddTodoItem = (props) => {\n\n    const [newTitle, setNewTitle] = useState(\"\")\n\n    const addButtonStyle = {\n        padding: \"12px\",\n        borderRadius: \"8px\",\n        borderWidth: \"0\",\n        fontSize: \"1.2em\",\n        cursor: \"pointer\",\n    }\n\n    const textBoxStyle = {\n        backgroundColor: \"#EFEFEF\",\n        fontSize: \"1.2em\",\n        padding: \"12px 8px\",\n        borderRadius: \"8px\",\n        borderWidth: \"0\",\n        color: \"#696969\",\n    }\n\n    const onSubmit = event => {\n        event.preventDefault();\n        props.addTodoItem(newTitle);\n        setNewTitle(\"\");\n    }\n\n    return (\n        <form onSubmit={onSubmit}>\n            <input type=\"text\" placeholder=\"add new item\"\n                value={newTitle}\n                onChange={e => setNewTitle(e.target.value)}\n                style={textBoxStyle}\n            /> {\" \"}\n            <input type=\"submit\" value=\"Add\" style={addButtonStyle} />\n        </form>\n    )\n}\n\nexport default AddTodoItem;","import React, { useState } from 'react';\nimport TodoItem from './TodoItem';\nimport { v4 as uuidv4 } from 'uuid';\nimport AddTodoItem from './AddTodoItem';\n\nconst TodoList = () => {\n\n    const [todos, setTodos] = useState(\n        [\n            {\n                id: uuidv4(),\n                title: \"do this\",\n                isCompleted: false,\n            },\n            {\n                id: uuidv4(),\n                title: \"do that\",\n                isCompleted: false,\n            },\n            {\n                id: uuidv4(),\n                title: \"do work\",\n                isCompleted: false,\n            },\n        ]\n    )\n\n    const markCompleted = (id) => {\n        setTodos(\n            todos.map(todo => {\n                if (todo.id === id) {\n                    todo.isCompleted = !todo.isCompleted\n                }\n                return todo\n            })\n        )\n\n        console.log(id)\n\n    }\n\n    const addTodoItem = (title) => {\n        const newTodoItem = {\n            id: uuidv4(),\n            title,\n            isCompleted: false,\n        }\n\n        setTodos([...todos, newTodoItem])\n    }\n\n    const deleteTodoItem = id => {\n        setTodos([...todos.filter(todo => todo.id !== id)])\n    }\n\n\n    return (\n        <div className=\"container\">\n            <AddTodoItem addTodoItem={addTodoItem} />\n            {todos.map(todo => (\n                <TodoItem key={todo.id} id={todo.id} title={todo.title}\n                    isCompleted={todo.isCompleted}\n                    markCompleted={markCompleted}\n                    deleteTodoItem={deleteTodoItem} />\n            ))\n            }\n        </div>\n\n    );\n}\n\nexport default TodoList;","import React from 'react';\nimport './App.css';\nimport TodoList from './TodoList';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faThList } from '@fortawesome/free-solid-svg-icons';\n\nfunction App() {\n\n\n  return (\n    <div className=\"App\">\n      <FontAwesomeIcon icon={faThList} size=\"3x\" color=\"#FBE168\" />\n      <h1 style={{ color: \"#939393\" }}>\n        Today\n    </h1>\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}